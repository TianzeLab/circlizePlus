% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/track.R
\name{ccGenomicHeatmap}
\alias{ccGenomicHeatmap}
\title{Object generator for S4 class ccGenomicTrack}
\usage{
ccGenomicHeatmap(...)
}
\arguments{
\item{...}{
  Arguments passed on to \code{\link[circlize:circos.genomicHeatmap]{circlize::circos.genomicHeatmap}}
  \describe{
    \item{\code{bed}}{A data frame in bed format, the matrix should be stored from the fourth column.
}
    \item{\code{col}}{Colors for the heatmaps. The value can be a matrix or a color mapping function generated by \code{\link[circlize]{colorRamp2}}.
}
    \item{\code{na_col}}{Color for NA values.
}
    \item{\code{numeric.column}}{Column index for the numeric columns. The values can be integer index or character index.
 By default it takes all numeric columns from the fourth column.
}
    \item{\code{border}}{Border of the heatmap grids.
}
    \item{\code{border_lwd}}{Line width for borders of heatmap grids.
}
    \item{\code{border_lty}}{Line style for borders of heatmap grids.
}
    \item{\code{connection_height}}{Height of the connection lines. If it is set to \code{NULL}, no connection will be drawn.
 Use \code{\link[circlize]{mm_h}}/\code{\link[circlize]{cm_h}}/\code{\link[circlize]{inches_h}} to set a height in absolute unit.
}
    \item{\code{line_col}}{Color of the connection lines. The value can be a vector.
}
    \item{\code{line_lwd}}{Line width of the connection lines.
}
    \item{\code{line_lty}}{Line style of the connection lines.
}
    \item{\code{heatmap_height}}{Height of the heatmap track
}
    \item{\code{side}}{Side of the heatmaps. Is the heatmap facing inside or outside?
}
    \item{\code{track.margin}}{Bottom and top margins.
}
  }}
}
\value{
Object \linkS4class{ccGenomicTrack}
}
\description{
Object \linkS4class{ccGenomicTrack} will call the function \link{circos.genomicHeatmap} while drawing.
}
\examples{
library(cilclizePlus)
cc = ccPlot(initMode = "initializeWithIdeogram")
bed = generateRandomBed(nr = 100, nc = 4)
col_fun = colorRamp2(c(-1, 0, 1), c("green", "black", "red"))
t1 = ccGenomicHeatmap(bed, col = col_fun, side = "inside", border = "white")
cc + t1
circos.clear()
}
