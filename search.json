[{"path":"https://tianzelab.github.io/circlizePlus/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 circlizePlus authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tianze Cao. Author, maintainer. Zheyu Zhang. Author.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cao T, Zhang Z (2025). circlizePlus: Using ggplot2 feature write readable R code circular visualization. R package version 0.0.0.9000, https://tianzelab.github.io/circlizePlus/, https://github.com/TianzeLab/circlizePlus.","code":"@Manual{,   title = {circlizePlus: Using ggplot2 feature to write readable R code for circular visualization},   author = {Tianze Cao and Zheyu Zhang},   year = {2025},   note = {R package version 0.0.0.9000, https://tianzelab.github.io/circlizePlus/},   url = {https://github.com/TianzeLab/circlizePlus}, }"},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"highlights","dir":"","previous_headings":"","what":"Highlights","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"Programming circlizePlus summarized 5 addition rules, simple clear. Like ggplot2, makes programming circular visualizations form addition plotting functions. ggplot2, data parameter function draws geometric figures can missing, use data parameter value ggplot() function. circlizePlus implements similar functionality. circlizePlus, function draws geometric figures can get default coordinate data (x, y) track belongs . Like ggplot2, supports data mapping. coordinate parameters mapped default values ​​passing anonymous function form “function(x,y){…}”.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"recommended latest version R environment installed. need install devtools load R environment, can install circlizePlus Github. Every time reboot R environment, need load circlizePlus . library(circlizePlus)","code":"if (!requireNamespace(\"devtools\", quietly=TRUE))     install.packages(\"devtools\") install_github(\"TianzeLab/circlizePlus\")"},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"grateful Dr. Zuguang Gu DFKZ invaluable guidance support throughout project.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"sample-code","dir":"","previous_headings":"","what":"Sample code","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"Dr. Gu written book(“Circular Visualization R”) explaining circlize works. illustrate similarities differences circlize cirzelizePlus, ’ve rewritten code book sample code. Visit circlizePlusBook details.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"addition-rules","dir":"","previous_headings":"","what":"Addition rules","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"ccPlot(contain n ccPars)+ccPar=ccPlot(contain n+1 ccPars),n≥0 ccPlot(contain n ccTracks)+ccTrack=ccPlot(contain n+1 ccTracks),n≥0 ccPlot(contain n ccLinks)+ccLink=ccPlot(contain n+1 ccLinks),n≥0 ccTrak(contain n ccTrakGeoms)+ccTrackGeom=ccTrack(contain n+1 ccTrackGeoms),n≥0 ccTrack(contain n ccCells)+ccCell=ccTrack(contain n+1 ccCells),n≥0 ccCell(contain n ccCellGeoms)+ccCellGeom=ccCell(contain n+1 ccCellGeoms),n≥0","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"s4-class-cccell-and-cccells","dir":"","previous_headings":"","what":"S4 class ccCell and ccCells","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"ccCell: Generate cell container belongs particular sector. ccCells: list multiple ccCell. ccCellGeom ccCells added together added ccCell contained ccCells.","code":""},{"path":[]},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"initializer","dir":"","previous_headings":"API outline","what":"Initializer","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"Class: ccPlot-class Function: ccPlot()","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"parameter","dir":"","previous_headings":"API outline","what":"Parameter","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"Class: ccPar-class Function: ccPar()","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"cell-container","dir":"","previous_headings":"API outline","what":"Cell container","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"Class: ccCell-class, ccCells-class Function: ccCell(), ccCells()","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"cell-geometry","dir":"","previous_headings":"API outline","what":"Cell geometry","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"Class: ccCellGeom-class, ccGenomicCellGeom-class Function: ccText(), ccPoints(), ccLines(), ccSegments(), ccRect(), ccPolygon(), ccXaxis(), ccYaxis(), ccBarplot(), ccBoxplot(), ccViolin(), ccArrow(), ccRaster(), ccDendrogram(), ccGenomicPoints(), ccGenomicLines(), ccGenomicRect(), ccGenomicText(), ccGenomicAxis()","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"track-container","dir":"","previous_headings":"API outline","what":"Track container","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"Class: ccTrack-class, ccGenomicTrack-class Function: ccTrack(), ccTrackHist(), ccGenomicTrack(), ccGenomicIdeogram(), ccGenomicHeatmap(), ccGenomicLabels(), [ccGenomicRainfall()][https://tianzelab.github.io/circlizePlus/reference/ccGenomicRainfall.html], [ccGenomicDensity()][https://tianzelab.github.io/circlizePlus/reference/ccGenomicDensity.html]","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"track-geometry","dir":"","previous_headings":"API outline","what":"Track geometry","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"Class: ccTrackGeom-class Function: ccTrackLines(), ccTrackPoints(), ccTrackText()","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"link","dir":"","previous_headings":"API outline","what":"Link","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"Class: ccLink-class, ccHeatmapLink-class, ccGenomicLink-class Function: ccLink(), ccHeatmapLink(), ccGenomicLink()","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"heatmap","dir":"","previous_headings":"API outline","what":"Heatmap","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"Class: ccHeatmap-class Function: ccHeatmap()","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"data-mapping-from-cctrack-to-ccgenomiccellgeom","dir":"","previous_headings":"","what":"Data mapping from ccTrack to ccGenomicCellGeom","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"combination column table :","code":""},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"get-track-from-ccgenomictrack","dir":"","previous_headings":"Data mapping from ccTrack to ccGenomicCellGeom","what":"Get track from ccGenomicTrack()","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"region value ccGenomicCellGeom constructor can NULL function like function(region,value){...}. data can obtained data parameter ccGenomicTrack. following example code, region value ccGenomicLines constructor NULL. real data comes data value corresponding sector ccGenomicTrack. region value ccGenomicPoints constructor function. real data calculated based definition function.","code":"data = generateRandomBed(nr =30, nc = 2) all_chr = c(\"chr1\",\"chr2\",\"chr3\",\"chr4\",\"chr5\",\"chr6\",\"chr7\",\"chr8\",\"chr9\",\"chr10\",\"chr11\",\"chr12\",\"chr13\",\"chr14\",\"chr15\",\"chr16\",\"chr17\",\"chr18\",\"chr19\",\"chr20\",\"chr21\",\"chr22\",\"chrX\",\"chrY\") cc = ccPlot(initMode = \"initializeWithIdeogram\", plotType=NULL) t1 = ccGenomicTrack(data=data, numeric.column = 4,                     panel.fun=function(region,value,...){                       circos.genomicPoints(region,value,...)                     }) cells1 = ccCells(sector.indexes = all_chr) + ccGenomicLines(numeric.column=2) + ccGenomicPoints(region=\\(region,value){region}, value=\\(region,value){value}, numeric.column=2) t1 = t1 + cells1 show(cc+t1)"},{"path":"https://tianzelab.github.io/circlizePlus/index.html","id":"get-track-from-cctrack","dir":"","previous_headings":"Data mapping from ccTrack to ccGenomicCellGeom","what":"Get track from ccTrack()","title":"Using ggplot2 feature to write readable R code for circular visualization","text":"x, x0, x1, xleft, xright, y, y0, y1, ytop, ybottom ccCellGeom constructor can NULL function like function(x,y){...}. data can obtained x y parameter ccTrack. following example code, x y first ccPoints constructor NULL. real data comes x y corresponding sector ccTrack. y second ccPoints constructor function. real data calculated based definition function.","code":"sectors = c('a','a','a','a','b','b','b','b','c','c','c','c','d','d','d','d') x1 = c(1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4) y1 = c(1,2,3,4,4,3,2,1,1,1,1,1,1,2,1,2) cc = ccPlot(initMode = \"initialize\", sectors = sectors, x = x1) cells = ccCells(sector.indexes = letters[1:4]) cc_point = ccPoints() cells = cells + cc_point + ccLines() track1 = ccTrack(sectors = sectors, x=x1, y = y1,panel.fun = function(x,y){   circos.points(y,x) }) cell_single = ccCell(sector.index = letters[3]) + ccPoints(y=\\(x,y){x-y}) track1 = track1 + cells + cell_single show(cc  + track1)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccArrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw an arrow — ccArrow","title":"Draw an arrow — ccArrow","text":"Object ccCellGeom call function circlize::circos.arrow drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccArrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw an arrow — ccArrow","text":"","code":"ccArrow(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccArrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw an arrow — ccArrow","text":"... Arguments passed circlize::circos.arrow x1 Start position arrow x-axis. x2 End position arrow x-axis. Note x2 larger x1. direction arrows can controlled arrow.position argument. y Position arrow y-axis. Note center arrow y-axis. width Width arrow body. sector.index Index sector. track.index Index track. arrow.head.length Length arrow head. Note value smaller length arrow (x2 - x1). arrow.head.width Width arrow head. arrow.position arrow head arrow. want arrow reversed direction, set value \"start\". tail shape arrow tail (opposite side arrow head). border Border color arrow. col Filled color arrow. lty Line style arrow.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccArrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw an arrow — ccArrow","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccArrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw an arrow — ccArrow","text":"","code":"library(circlizePlus) cc=ccPlot(sectors=letters[1:4], xlim = c(0, 10)) track=ccTrack(ylim = c(0, 1)) cell=ccCell(sector.index = 'a')+ccArrow(x1=1,x2=9) track=track+cell cc+track"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccBarplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw barplots — ccBarplot","title":"Draw barplots — ccBarplot","text":"Object ccCellGeom call function circlize::circos.barplot drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccBarplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw barplots — ccBarplot","text":"","code":"ccBarplot(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccBarplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw barplots — ccBarplot","text":"... Arguments passed circlize::circos.barplot value numeric vector matrix. matrix, columns correspond height bars. pos Positions bars. bar_width Width bars. assumes bars locating x = 1, 2, .... col Filled color bars. border Color border. lwd Line width. lty Line style. sector.index Index sector. track.index Index track.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccBarplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw barplots — ccBarplot","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccBarplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw barplots — ccBarplot","text":"","code":"library(circlizePlus) cc=ccPlot(sectors=letters[1:4], xlim = c(0, 10)) track=ccTrack(ylim = c(0, 1)) cell=ccCell(sector.index = 'a')+ccBarplot(value=runif(10), pos=1:10 - 0.5, col = 1:10) track=track+cell cc+track"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccBoxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw boxplots — ccBoxplot","title":"Draw boxplots — ccBoxplot","text":"Object ccCellGeom call function circlize::circos.boxplot drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccBoxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw boxplots — ccBoxplot","text":"","code":"ccBoxplot(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccBoxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw boxplots — ccBoxplot","text":"... Arguments passed circlize::circos.boxplot value numeric vector, matrix list. matrix, boxplots made columns (column box). pos Positions boxes. outline Whether draw outliers. box_width Width boxes. col Filled color boxes. border Color border well quantile lines. lwd Line width. lty Line style cex Point size. pch Point type. pt.col Point color. sector.index Index sector. track.index Index track.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccBoxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw boxplots — ccBoxplot","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccBoxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw boxplots — ccBoxplot","text":"","code":"library(circlizePlus) cc=ccPlot(sectors=letters[1:4], xlim = c(0, 10)) track=ccTrack(ylim = c(0, 1)) cell=ccCell(sector.index = 'a')+ccBoxplot(value=replicate(runif(10), n = 10, simplify = FALSE), pos=1:10 - 0.5, col = 1:10) track=track+cell cc+track"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCell-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccCell — ccCell-class","title":"S4 class ccCell — ccCell-class","text":"cell container belongs particular sector.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCell-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccCell — ccCell-class","text":"sector.index character. index corresponds sector. geoms list. elements list type ccCellGeom ccGenomicCellGeom.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCell-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccCell — ccCell-class","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCell.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a cell container that belongs to a particular sector — ccCell","title":"Generate a cell container that belongs to a particular sector — ccCell","text":"Generate cell container belongs particular sector","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a cell container that belongs to a particular sector — ccCell","text":"","code":"ccCell(sector.index = NULL)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a cell container that belongs to a particular sector — ccCell","text":"sector.index character. index corresponds sector.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a cell container that belongs to a particular sector — ccCell","text":"Object ccCell","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a cell container that belongs to a particular sector — ccCell","text":"","code":"library(circlizePlus) sectors = c('a','a','a','a','b','b','b','b','c','c','c','c','d','d','d','d') x1 = c(1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4) y1 = c(1,2,3,4,4,3,2,1,1,1,1,1,1,2,1,2) cc = ccPlot(initMode = \"initialize\", sectors = sectors, x = x1) track1 = ccTrack(sectors = sectors, x=x1, y = y1) cell_single = ccCell(sector.index = letters[3]) + ccPoints(y=\\(x,y){y}) track1 = track1 + cell_single cc  + track1"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCellGeom-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccCellGeom — ccCellGeom-class","title":"S4 class ccCellGeom — ccCellGeom-class","text":"Objectified representation R package circlize's plotting functions corresponding parameters cell level.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCellGeom-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccCellGeom — ccCellGeom-class","text":"func character. name plot function R package circlize. params list. function corresponding parameter param called, represents argument function.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCellGeom-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccCellGeom — ccCellGeom-class","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCells-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccCells — ccCells-class","title":"S4 class ccCells — ccCells-class","text":"list multiple ccCell. ccCellGeom ccCells added together added ccCell contained ccCells.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCells-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccCells — ccCells-class","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of multiple object ccCell-class — ccCells","title":"Generate a list of multiple object ccCell-class — ccCells","text":"Generate list multiple object ccCell-class","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of multiple object ccCell-class — ccCells","text":"","code":"ccCells(sector.indexes = list())"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of multiple object ccCell-class — ccCells","text":"sector.indexes list. list indexs corresponds sectors.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of multiple object ccCell-class — ccCells","text":"Object ccCells","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list of multiple object ccCell-class — ccCells","text":"","code":"library(circlizePlus) sectors = c('a','a','a','a','b','b','b','b','c','c','c','c','d','d','d','d') x1 = c(1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4) y1 = c(1,2,3,4,4,3,2,1,1,1,1,1,1,2,1,2) cc = ccPlot(initMode = \"initialize\", sectors = sectors, x = x1) cells = ccCells(sector.indexes = letters[1:4]) cc_point = ccPoints() cells = cells + cc_point + ccLines() track1 = ccTrack(sectors = sectors, x=x1, y = y1) track1 = track1 + cells cc  + track1"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccDendrogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw dendrogram plots in a track — ccDendrogram","title":"Draw dendrogram plots in a track — ccDendrogram","text":"Object ccCellGeom call function circlize::circos.dendrogram drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccDendrogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw dendrogram plots in a track — ccDendrogram","text":"","code":"ccDendrogram(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccDendrogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw dendrogram plots in a track — ccDendrogram","text":"... Arguments passed circlize::circos.dendrogram dend dendrogram object. facing dendromgrams facing inside circle outside? max_height Maximum height dendrogram. important one dendrograms drawn one track making comparable. height dendrogram can obtained attr(dend, \"height\"). use_x_attr Whether use x attribute determine node positions dendrogram, used internally. sector.index Index sector. track.index Index track.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccDendrogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw dendrogram plots in a track — ccDendrogram","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccDendrogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw dendrogram plots in a track — ccDendrogram","text":"","code":"library(ape) #>  #> Attaching package: ‘ape’ #> The following object is masked from ‘package:circlize’: #>  #>     degree suppressPackageStartupMessages(library(dendextend)) library(circlizePlus) data(bird.orders) hc = as.hclust(bird.orders) labels = hc$labels ct = cutree(hc, 6) n = length(labels) dend = as.dendrogram(hc) par1 = ccPar(cell.padding = c(0, 0, 0, 0)) cc = ccPlot(sectors = \"a\", xlim = c(0, n)) # only one sector dend = color_branches(dend, k = 6, col = 1:6) dend_height = attr(dend, \"height\") t1 = ccTrack(ylim = c(0, dend_height), bg.border = NA,track.height = 0.4) cell1 = ccCell(sector.index = \"a\") + ccDendrogram(dend = dend) cc + par1 + (t1 + cell1)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicAxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Add genomic axes — ccGenomicAxis","title":"Add genomic axes — ccGenomicAxis","text":"Object ccGenomicCellGeom call function circlize::circos.genomicAxis drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicAxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add genomic axes — ccGenomicAxis","text":"","code":"ccGenomicAxis(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicAxis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add genomic axes — ccGenomicAxis","text":"... Arguments passed circlize::circos.genomicAxis h Position axes. \"top\" \"bottom\". major.Major breaks. major.set, major.ignored. labels labels corresponding major.. labels set, major.must set. major.Increment major ticks. calculated automatically value set (every 10 degrees major tick). tickLabelsStartFromZero Whether axis tick labels start 0? affect axis labels affect x-values cells. labels.cex font size axis tick labels. sector.index Index sector track.index Index track","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicAxis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add genomic axes — ccGenomicAxis","text":"Object ccGenomicCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicAxis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add genomic axes — ccGenomicAxis","text":"","code":"library(circlizePlus) cc = ccPlot(initMode='initializeWithIdeogram',chromosome.index = paste0(\"chr\", 1:4), plotType = NULL) track=ccTrack(ylim=c(0,1)) cell=ccCell(sector.index = 'chr1')+ccGenomicAxis() e=track+cell cc+e"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicCellGeom-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccGenomicCellGeom — ccGenomicCellGeom-class","title":"S4 class ccGenomicCellGeom — ccGenomicCellGeom-class","text":"subclass ccCellGeom. works plotted data genomic data. Objectified representation R package circlize's plotting functions corresponding parameters cell level.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicCellGeom-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccGenomicCellGeom — ccGenomicCellGeom-class","text":"func character. name plot function R package circlize. params list. function corresponding parameter param called, represents argument function.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicCellGeom-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccGenomicCellGeom — ccGenomicCellGeom-class","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a track of density plot — ccGenomicDensity","title":"Create a track of density plot — ccGenomicDensity","text":"Object ccGenomicTrack call function circlize::circos.genomicDensity drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a track of density plot — ccGenomicDensity","text":"","code":"ccGenomicDensity(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a track of density plot — ccGenomicDensity","text":"... Arguments passed circlize::circos.genomicDensity data bed-file-like data frame list data frames. input list data frames.  multiple density plot one track. ylim.force Whether force upper bound ylim 1. Ignored count_by set number. window.size Pass genomicDensity. overlap Pass genomicDensity. count_by Pass genomicDensity. col Colors. length one. data list data frames, length col  can also length list. multiple sets genomic regions visualized one  single track, set colors transparency distinguish . lwd Width lines, setting col argument. lty Style lines, setting col argument. type Type lines, see circos.lines. area See circos.lines. area.baseline Deprecated, use baseline instead. baseline See circos.lines. border See circos.lines.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a track of density plot — ccGenomicDensity","text":"Object ccGenomicTrack","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicDensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a track of density plot — ccGenomicDensity","text":"","code":"library(circlizePlus) load(system.file(package = \"circlize\", \"extdata\", \"DMR.RData\")) cc = ccPlot(initMode=\"initializeWithIdeogram\", chromosome.index = paste0(\"chr\", 1:22)) t2 = ccGenomicDensity(DMR_hyper, col = c(\"#FF000080\"), track.height = 0.1) t3 = ccGenomicDensity(DMR_hypo, col = c(\"#0000FF80\"), track.height = 0.1) cc + t2 + t3  circos.clear()"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a heatmap track for genomic graph — ccGenomicHeatmap","title":"Define a heatmap track for genomic graph — ccGenomicHeatmap","text":"Object ccGenomicTrack call function circlize::circos.genomicHeatmap drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a heatmap track for genomic graph — ccGenomicHeatmap","text":"","code":"ccGenomicHeatmap(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a heatmap track for genomic graph — ccGenomicHeatmap","text":"... Arguments passed circlize::circos.genomicHeatmap bed data frame bed format, matrix stored fourth column. col Colors heatmaps. value can matrix color mapping function generated colorRamp2. na_col Color NA values. numeric.column Column index numeric columns. values can integer index character index.  default takes numeric columns fourth column. border Border heatmap grids. border_lwd Line width borders heatmap grids. border_lty Line style borders heatmap grids. connection_height Height connection lines. set NULL, connection drawn.  Use mm_h/cm_h/inches_h set height absolute unit. line_col Color connection lines. value can vector. line_lwd Line width connection lines. line_lty Line style connection lines. heatmap_height Height heatmap track side Side heatmaps. heatmap facing inside outside? track.margin Bottom top margins.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a heatmap track for genomic graph — ccGenomicHeatmap","text":"Object ccGenomicTrack","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a heatmap track for genomic graph — ccGenomicHeatmap","text":"","code":"library(circlizePlus) cc = ccPlot(initMode = \"initializeWithIdeogram\") bed = generateRandomBed(nr = 100, nc = 4) col_fun = colorRamp2(c(-1, 0, 1), c(\"green\", \"black\", \"red\")) t1 = ccGenomicHeatmap(bed, col = col_fun, side = \"inside\", border = \"white\") cc + t1  circos.clear()"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicIdeogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Define an ideograms track for genomic graph — ccGenomicIdeogram","title":"Define an ideograms track for genomic graph — ccGenomicIdeogram","text":"Object ccGenomicTrack call function circlize::circos.genomicIdeogram drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicIdeogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define an ideograms track for genomic graph — ccGenomicIdeogram","text":"","code":"ccGenomicIdeogram(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicIdeogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define an ideograms track for genomic graph — ccGenomicIdeogram","text":"... Arguments passed circlize::circos.genomicIdeogram cytoband data frame file path, pass read.cytoband. species Abbreviations genome, pass read.cytoband. track.height Height ideogram track. track.margin Margins track.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicIdeogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define an ideograms track for genomic graph — ccGenomicIdeogram","text":"Object ccGenomicTrack","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicIdeogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define an ideograms track for genomic graph — ccGenomicIdeogram","text":"","code":"library(circlizePlus) cc = ccPlot(initMode = \"initializeWithIdeogram\",chromosome.index = \"chr1\", plotType = NULL) human_cytoband = read.cytoband(species = \"hg19\")$df t2=ccGenomicIdeogram(human_cytoband) cc+t2  circos.clear()"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add labels to specific genomic track — ccGenomicLabels","title":"Add labels to specific genomic track — ccGenomicLabels","text":"Object ccGenomicTrack call function circlize::circos.genomicLabels drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add labels to specific genomic track — ccGenomicLabels","text":"","code":"ccGenomicLabels(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add labels to specific genomic track — ccGenomicLabels","text":"... Arguments passed circlize::circos.genomicLabels bed data frame bed format. labels vector labels corresponding rows bed. labels.column label column already bed, index column bed. facing fFacing labels. value can \"clockwise\" \"reverse.clockwise\". niceFacing Whether automatically adjust facing labels. col Color labels. cex Size labels. font Font labels. padding Padding labels, value ratio height label. connection_height Height connection track. line_col Color connection lines. line_lwd Line width connection lines. line_lty Line type connectioin lines. labels_height Height labels track. side Side labels track, inside track regions marked? labels.side side. replace side future versions. track.margin Bottom top margins.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add labels to specific genomic track — ccGenomicLabels","text":"Object ccGenomicTrack","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add labels to specific genomic track — ccGenomicLabels","text":"","code":"library(circlizePlus) bed = generateRandomBed(nr = 50, fun = function(k) sample(letters, k, replace = TRUE)) bed[1, 4] = \"aaaaa\" cc = ccPlot(initMode = \"initializeWithIdeogram\", plotType = NULL) t1 = ccGenomicLabels(bed, labels.column = 4, side = \"outside\",                      col = as.numeric(factor(bed[[1]])), line_col = as.numeric(factor(bed[[1]]))) cc + t1  circos.clear()"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Add lines for genomic data visualization — ccGenomicLines","title":"Add lines for genomic data visualization — ccGenomicLines","text":"Object ccGenomicCellGeom call function circlize::circos.genomicLines drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add lines for genomic data visualization — ccGenomicLines","text":"","code":"ccGenomicLines(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add lines for genomic data visualization — ccGenomicLines","text":"... Arguments passed circlize::circos.genomicLines region data frame contains 2 column correspond start positions end positions. value data frame contains values information. numeric.column column value data frame taken y-value.  defined, whole numeric columns value taken. sector.index Index sector. track.index Index track. posTransform Self-defined function transform genomic positions, see posTransform.default explaination. col col lines/areas. one numeric column, length col can either one number numeric columns.  one numeric column type either segment h,  length col can either one number rows region.  pass circos.lines lwd Settings similar col. Pass circos.lines. lty Settings similar col. Pass circos.lines. type additional option segment plot segment lines start position end position. Settings similar col. Pass circos.lines. area Settings similar col. Pass circos.lines. area.baseline Deprecated, use baseline instead. baseline Settings similar col. Pass circos.lines. border Settings similar col. Pass circos.lines. pt.col Settings similar col. Pass circos.lines. cex Settings similar col. Pass circos.lines. pch Settings similar col. Pass circos.lines.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add lines for genomic data visualization — ccGenomicLines","text":"Object ccGenomicCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add lines for genomic data visualization — ccGenomicLines","text":"","code":"library(circlizePlus) data = generateRandomBed(nr =30, nc = 2) all_chr = c(\"chr1\",\"chr2\",\"chr3\",\"chr4\",\"chr5\",\"chr6\",\"chr7\",\"chr8\",\"chr9\",\"chr10\",\"chr11\",\"chr12\",\"chr13\",\"chr14\",\"chr15\",\"chr16\",\"chr17\",\"chr18\",\"chr19\",\"chr20\",\"chr21\",\"chr22\",\"chrX\",\"chrY\") cc = ccPlot(initMode = \"initializeWithIdeogram\", plotType=NULL) t1 = ccGenomicTrack(data=data, numeric.column = 4) cells1 = ccCells(sector.indexes = all_chr) + ccGenomicLines(numeric.column=2) t1 = t1 + cells1 show(cc+t1) #> Note: 1 point is out of plotting region in sector 'chr4', track '1'."},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLink-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccGenomicLink — ccGenomicLink-class","title":"S4 class ccGenomicLink — ccGenomicLink-class","text":"S4 class ccGenomicLink","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLink-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccGenomicLink — ccGenomicLink-class","text":"func character. Normally \"circos.genomicLink\". params list. named list stores parameters function circlize::circos.genomicLink called backend.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLink-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccGenomicLink — ccGenomicLink-class","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLink.html","id":null,"dir":"Reference","previous_headings":"","what":"Add links between two sets of genomic positions — ccGenomicLink","title":"Add links between two sets of genomic positions — ccGenomicLink","text":"Object ccGenomicLink call function circlize::circos.genomicLink drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add links between two sets of genomic positions — ccGenomicLink","text":"","code":"ccGenomicLink(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add links between two sets of genomic positions — ccGenomicLink","text":"... Arguments passed circlize::circos.genomicLink region1 data frame bed format. region2 data frame bed format. rou Pass circos.link. rou1 Pass circos.link. rou2 Pass circos.link. col Pass circos.link, length can either one nrow region1. lwd Pass circos.link, length can either one nrow region1. lty Pass circos.link, length can either one nrow region1. border Pass circos.link, length can either one nrow region1.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add links between two sets of genomic positions — ccGenomicLink","text":"Object ccGenomicLink","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicLink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add links between two sets of genomic positions — ccGenomicLink","text":"","code":"library(circlizePlus) set.seed(123)  bed1 = generateRandomBed(nr = 100) bed1 = bed1[sample(nrow(bed1), 20), ] bed2 = generateRandomBed(nr = 100) bed2 = bed2[sample(nrow(bed2), 20), ] par1 = ccPar(\"track.height\" = 0.1, cell.padding = c(0, 0, 0, 0)) cc = ccPlot(initMode=\"initializeWithIdeogram\")  link1 = ccGenomicLink(bed1, bed2, col = sample(1:5, 20, replace = TRUE), border = NA) cc + par1 + link1"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Add points for genomic data visualization — ccGenomicPoints","title":"Add points for genomic data visualization — ccGenomicPoints","text":"Object ccGenomicCellGeom call function circlize::circos.genomicPoints drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicPoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add points for genomic data visualization — ccGenomicPoints","text":"","code":"ccGenomicPoints(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add points for genomic data visualization — ccGenomicPoints","text":"... Arguments passed circlize::circos.genomicPoints region data frame contains 2 columns correspond start positions end positions. value data frame contains values information. numeric.column column value data frame taken y-value.  defined, whole numeric columns value taken. sector.index Index sector. track.index Index track. posTransform Self-defined function transform genomic positions, see posTransform.default explanation col Color points. one numeric column, length col can either one number rows region.  one numeric column, length col can either one number numeric columns.  Pass circos.points. pch Type points. Settings similar col. Pass circos.points. cex Size points. Settings similar col. Pass circos.points. bg Background colors points.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicPoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add points for genomic data visualization — ccGenomicPoints","text":"Object ccGenomicCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicPoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add points for genomic data visualization — ccGenomicPoints","text":"","code":"library(circlizePlus) data = generateRandomBed(nr =30, nc = 2) all_chr = c(\"chr1\",\"chr2\",\"chr3\",\"chr4\",\"chr5\",\"chr6\",\"chr7\",\"chr8\",\"chr9\",\"chr10\",\"chr11\",\"chr12\",\"chr13\",\"chr14\",\"chr15\",\"chr16\",\"chr17\",\"chr18\",\"chr19\",\"chr20\",\"chr21\",\"chr22\",\"chrX\",\"chrY\") cc = ccPlot(initMode = \"initializeWithIdeogram\", plotType=NULL) t1 = ccGenomicTrack(data=data, numeric.column = 4) cells1 = ccCells(sector.indexes = all_chr) + ccGenomicPoints(region=\\(region,value){region}, value=\\(region,value){value}, numeric.column=2) t1 = t1 + cells1 show(cc+t1)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicRainfall.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a rainfall plot — ccGenomicRainfall","title":"Create a rainfall plot — ccGenomicRainfall","text":"Object ccGenomicTrack call function circlize::circos.genomicRainfall drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicRainfall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a rainfall plot — ccGenomicRainfall","text":"","code":"ccGenomicRainfall(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicRainfall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a rainfall plot — ccGenomicRainfall","text":"... Arguments passed circlize::circos.genomicRainfall data bed-file-like data frame list data frames. mode calculate distance two neighbouring regions, pass rainfallTransform. ylim ylim rainfall plot track. normalize_to_width FALSE, value correspond log10(dist+1),  normalize_to_width TRUE, value correspond log2(rel_dist). col Color points. length one. data list, length col  can also length list. pch Style points. cex Size points. normalize_to_width TRUE, value relative distance divided width region.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicRainfall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a rainfall plot — ccGenomicRainfall","text":"Object ccGenomicTrack","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicRainfall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a rainfall plot — ccGenomicRainfall","text":"","code":"library(circlizePlus) load(system.file(package = \"circlize\", \"extdata\", \"DMR.RData\")) cc = ccPlot(initMode=\"initializeWithIdeogram\", chromosome.index = paste0(\"chr\", 1:22)) bed_list = list(DMR_hyper, DMR_hypo) t1 = ccGenomicRainfall(bed_list, pch = 16, cex = 0.4, col = c(\"#FF000080\", \"#0000FF80\")) cc + t1  circos.clear()"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicRect.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw rectangle for genomic data visualization — ccGenomicRect","title":"Draw rectangle for genomic data visualization — ccGenomicRect","text":"Object ccGenomicCellGeom call function circlize::circos.genomicRect drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicRect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw rectangle for genomic data visualization — ccGenomicRect","text":"","code":"ccGenomicRect(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicRect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw rectangle for genomic data visualization — ccGenomicRect","text":"... Arguments passed circlize::circos.genomicRect region data frame contains 2 column correspond start positions end positions. value data frame contains values information. ytop vector single value indicating top position rectangles. ybottom vector single value indicating bottom position rectangles. ytop.column ytop value, index column. ybottom.column ybottom value, index column. sector.index Index sector. track.index Index track. posTransform Self-defined function transform genomic positions, see posTransform.default explaination. col length col can either one number rows region. Pass circos.rect. border Settings similar col. Pass circos.rect. lty Settings similar col. Pass circos.rect.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicRect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw rectangle for genomic data visualization — ccGenomicRect","text":"Object ccGenomicCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicRect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw rectangle for genomic data visualization — ccGenomicRect","text":"","code":"library(circlizePlus) par1 = ccPar(\"track.height\" = 0.1, cell.padding = c(0, 0, 0, 0)) cc = ccPlot(initMode=\"initializeWithIdeogram\",plotType = NULL) bed1 = generateRandomBed(nr = 100) bed2 = generateRandomBed(nr = 100) bed_list = list(bed1, bed2) f = colorRamp2(breaks = c(-1, 0, 1), colors = c(\"green\", \"black\", \"red\")) track1 = ccGenomicTrack(data=bed_list, stack = TRUE) all_chr = c(\"chr1\",\"chr2\",\"chr3\",\"chr4\",\"chr5\",\"chr6\",\"chr7\",\"chr8\",\"chr9\",\"chr10\",\"chr11\",\"chr12\",\"chr13\",\"chr14\",\"chr15\",\"chr16\",\"chr17\",\"chr18\",\"chr19\",\"chr20\",\"chr21\",\"chr22\",\"chrX\",\"chrY\") rect1 = ccGenomicRect(col=1,border = NA) cells1 = ccCells(sector.indexes = all_chr) + rect1 cc + par1 + (track1 + cells1)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicText.html","id":null,"dir":"Reference","previous_headings":"","what":"Add text for genomic data visualization — ccGenomicText","title":"Add text for genomic data visualization — ccGenomicText","text":"Object ccGenomicCellGeom call function circlize::circos.genomicText drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add text for genomic data visualization — ccGenomicText","text":"","code":"ccGenomicText(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add text for genomic data visualization — ccGenomicText","text":"... Arguments passed circlize::circos.genomicText region data frame contains 2 column correspond start positions end positions. value data frame contains values information. y vector single value indicating position text. labels Labels text corresponding genomic positions. labels.column labels value, index column value. numeric.column column value data frame taken y-value.  defined, first numeric columns value taken. sector.index Index sector. track.index Index track. posTransform Self-defined function transform genomic positions, see posTransform.default explanation. facing Passing circos.text. Settings similar col. niceFacing facing text adjusted fit human eyes? direction Deprecated, use facing instead. adj Pass circos.text. Settings similar col. cex Pass circos.text. Settings similar col. col Pass circos.text. length col can either one number rows region. font Pass circos.text. Settings similar col. padding pass posTransform set posTransform.text. extend pass posTransform set posTransform.text. align_to pass posTransform set posTransform.text.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicText.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add text for genomic data visualization — ccGenomicText","text":"Object ccGenomicCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicText.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add text for genomic data visualization — ccGenomicText","text":"","code":"library(circlizePlus) cc = ccPlot(initMode=\"initializeWithIdeogram\",plotType = NULL) bed = generateRandomBed(nr = 20) track1 = ccGenomicTrack(data=bed, ylim = c(0, 1)) all_chr = c(\"chr1\",\"chr2\",\"chr3\",\"chr4\",\"chr5\",\"chr6\",\"chr7\",\"chr8\",\"chr9\",\"chr10\",\"chr11\",\"chr12\",\"chr13\",\"chr14\",\"chr15\",\"chr16\",\"chr17\",\"chr18\",\"chr19\",\"chr20\",\"chr21\",\"chr22\",\"chrX\",\"chrY\") text1 = ccGenomicText(y = 0.5, labels = \"text\") cells1 = ccCells(sector.indexes = all_chr) + text1 cc + (track1 + cells1)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicTrack-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccGenomicTrack — ccGenomicTrack-class","title":"S4 class ccGenomicTrack — ccGenomicTrack-class","text":"S4 class ccGenomicTrack","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicTrack-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccGenomicTrack — ccGenomicTrack-class","text":"func character. Normally \"circos.genomicTrack\" \"circos.genomicIdeogram\" \"circos.genomicHeatmap\" \"circos.genomicLabels\" \"circos.genomicRainfall\" \"circos.genomicDensity\". params list. named list stores parameters function called backend. trackGeoms list. list ccTrackGeom stored. cells list. list ccCell stored.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicTrack-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccGenomicTrack — ccGenomicTrack-class","text":"","code":"library(circlizePlus) cc = ccPlot(initMode = \"initializeWithIdeogram\",chromosome.index = \"chr1\", plotType = NULL) bed = generateRandomBed(nr = 300) t1 = ccGenomicTrack(bed, panel.fun = function(region, value, ...) {   circos.genomicPoints(region, value, pch = 16, cex = 0.5, ...) }) cc+t1  circos.clear()"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicTrack.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a track for genomic data visualization — ccGenomicTrack","title":"Define a track for genomic data visualization — ccGenomicTrack","text":"Object ccGenomicTrack call function circlize::circos.genomicTrackPlotRegion drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicTrack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a track for genomic data visualization — ccGenomicTrack","text":"","code":"ccGenomicTrack(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicTrack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a track for genomic data visualization — ccGenomicTrack","text":"... Arguments passed circlize::circos.genomicTrackPlotRegion data bed-file-like data frame list data frames ylim NULL, value calculated data. stack set TRUE, value ignored. stack whether plot \"stack\" mode. numeric.column Columns numeric values data used plotting.  data data frame list, numeric.column either length one length data.  value numeric.column set, value depend structure data.  data data frame, default value numeric.column numeric column starting fourth column.  data list data frame, default value numeric.column vector length data  value default numeric.column index first numeric column corresponding data frame. jitter Numeric. works adding points circos.genomicTrackPlotRegion stack mode panel.fun Self-defined function applied sector. Please different  circos.trackPlotRegion. function, two arguments (region value) plus ....  , region two-column data frame start positions end positions current genomic category (e.g. chromosome).  value data frame derived data excluding first three columns. Rows value correspond  rows region. ... mandatory used pass internal parameters functions. definition  value different according different input data (data frame list data frame) different settings (stacked ),  please refer 'details' section vignettes detailed explanation.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicTrack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a track for genomic data visualization — ccGenomicTrack","text":"Object ccGenomicTrack","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccGenomicTrack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a track for genomic data visualization — ccGenomicTrack","text":"","code":"library(circlizePlus) cc = ccPlot(initMode = \"initializeWithIdeogram\",chromosome.index = \"chr1\", plotType = NULL) bed = generateRandomBed(nr = 300) t1 = ccGenomicTrack(bed, panel.fun = function(region, value, ...) {   circos.genomicPoints(region, value, pch = 16, cex = 0.5, ...) }) cc+t1  circos.clear()"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmap-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccHeatmap — ccHeatmap-class","title":"S4 class ccHeatmap — ccHeatmap-class","text":"ccHeatmap special class. can used single track also result adding heatmap track ccPlot","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmap-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccHeatmap — ccHeatmap-class","text":"func character. Normally \"circos.heatmap\". params list. named list stores parameters function circlize::circos.heatmap called backend. trackGeoms list. list ccTrackGeom stored. cells list. list ccCell stored. tracks list. list ccTrack ccGenomicTrack ccHeatmap stored. links list. list ccLink ccGenomicLink ccHeatmapLink stored. pars list. list ccPar stored.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Object generator for S4 class ccHeatmap — ccHeatmap","title":"Object generator for S4 class ccHeatmap — ccHeatmap","text":"Object ccHeatmap call function circlize::circos.heatmap drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object generator for S4 class ccHeatmap — ccHeatmap","text":"","code":"ccHeatmap(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object generator for S4 class ccHeatmap — ccHeatmap","text":"... Arguments passed circlize::circos.heatmap mat matrix vector. vector transformed one-column matrix. split categorical variable. splits matrix list matrices. col values matrices continuous, color color mapping generated  colorRamp2. values characters, color named color vector. na.col Color NA values. cell.border Border color cells. single scalar. cell.lty Line type cell borders. single scalar. cell.lwd Line width cell borders. single scalar. bg.border Color background border. bg.lty Line type background border. bg.lwd Line width background border. ignore.white Whether draw white color? cluster whether apply clustering rows. value can also dendrogram/hclust object objects can converted .dendrogram. clustering.method Clustering method, pass hclust. distance.method Distance method, pass dist. dend.callback callback function applied dendrogram every sector. dend.side Side dendrograms relative heatmap track. dend.track.height Track height dendrograms. rownames.side Side row names relative heatmap track. rownames.cex Cex row names. rownames.font Font row names. rownames.col Color row names. show.sector.labels Whether show sector labels. cell_width Relative widths heatmap cells.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object generator for S4 class ccHeatmap — ccHeatmap","text":"Object ccHeatmap","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object generator for S4 class ccHeatmap — ccHeatmap","text":"","code":"library(circlizePlus) set.seed(123) mat1 = rbind(cbind(matrix(rnorm(50*5, mean = 1), nr = 50),                    matrix(rnorm(50*5, mean = -1), nr = 50)),              cbind(matrix(rnorm(50*5, mean = -1), nr = 50),                    matrix(rnorm(50*5, mean = 1), nr = 50))             ) rownames(mat1) = paste0(\"R\", 1:100) colnames(mat1) = paste0(\"C\", 1:10) mat1 = mat1[sample(100, 100), ] # randomly permute rows split = sample(letters[1:5], 100, replace = TRUE) spilt = factor(split, levels = letters[1:5]) col_fun1 = colorRamp2(c(-2, 0, 2), c(\"blue\", \"white\", \"red\")) ccHeatmap(mat=mat1, split = split, col = col_fun1)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmapLink-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccHeatmapLink — ccHeatmapLink-class","title":"S4 class ccHeatmapLink — ccHeatmapLink-class","text":"S4 class ccHeatmapLink","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmapLink-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccHeatmapLink — ccHeatmapLink-class","text":"func character. Normally \"circos.heatmap.link\". params list. named list stores parameters function circlize::circos.heatmap.link called backend.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmapLink-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccHeatmapLink — ccHeatmapLink-class","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmapLink.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a link between two matrix rows in the circular heatmap — ccHeatmapLink","title":"Draw a link between two matrix rows in the circular heatmap — ccHeatmapLink","text":"Object ccHeatmapLink call function circlize::circos.heatmap.link drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmapLink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a link between two matrix rows in the circular heatmap — ccHeatmapLink","text":"","code":"ccHeatmapLink(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmapLink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a link between two matrix rows in the circular heatmap — ccHeatmapLink","text":"... Arguments passed circlize::circos.heatmap.link row_from row index link starts. value length 1. want draw multiple links, put function loop. row_to row index link ends.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmapLink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a link between two matrix rows in the circular heatmap — ccHeatmapLink","text":"Object ccHeatmapLink","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccHeatmapLink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a link between two matrix rows in the circular heatmap — ccHeatmapLink","text":"","code":"library(circlizePlus) set.seed(123) mat = matrix(rnorm(100*10), nrow = 100) rownames(mat) = paste0(\"R\", 1:100) col_fun = colorRamp2(c(-2, 0, 2), c(\"blue\", \"white\", \"red\")) cc = ccHeatmap(mat, col = col_fun, rownames.side = \"outside\") link1 = ccHeatmapLink(10, 60) cc + link1"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw lines in a region — ccLines","title":"Draw lines in a region — ccLines","text":"Object ccCellGeom call function circlize::circos.lines drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw lines in a region — ccLines","text":"","code":"ccLines(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw lines in a region — ccLines","text":"... Arguments passed circlize::circos.lines x Data points x-axis, measured \"current\" data coordinate. y Data points y-axis, measured \"current\" data coordinate. sector.index Index sector. track.index Index track. col Line color. lwd Line width. lty Line style. type Line type, similar type argument lines, c(\"l\", \"o\", \"h\", \"s\") straight Whether draw straight lines points. area Whether fill area lines. set TRUE, col controls filled color area border controls color line. area.baseline deprecated, use baseline instead. baseline base line draw areas. default minimal y-range (bottom). can string number. string, one bottom top. argument also works type set h. border color border area. pt.col type \"o\", point color. cex type \"o\", point size. pch type \"o\", point type.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw lines in a region — ccLines","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw lines in a region — ccLines","text":"","code":"library(circlizePlus) sectors = letters[1:9] par=ccPar(points.overflow.warning = FALSE) cc=ccPlot(sectors = sectors, xlim = c(0, 10)) cc=cc+par track=ccTrack(sectors=sectors, ylim = c(0, 10), track.height = 0.5) cells=ccCell(sector.index = 'a')+ccLines(sort(x=runif(10)*10), y=runif(10)*10, sector.index = \"a\") track=track+cells cc+track"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLink-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccLink — ccLink-class","title":"S4 class ccLink — ccLink-class","text":"S4 class ccLink","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLink-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccLink — ccLink-class","text":"func character. Normally \"circos.link\". params list. named list stores parameters function circlize::circos.link called backend.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLink-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccLink — ccLink-class","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLink.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a link — ccLink","title":"Add a link — ccLink","text":"Object ccLink call function circlize::circos.link drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a link — ccLink","text":"","code":"ccLink(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a link — ccLink","text":"... Arguments passed circlize::circos.link sector.index1 Index first sector one link end locates point1 single value numeric vector length 2. 2-elements vector,  link belt/ribbon. sector.index2 Index sector link end locates point2 single value numeric vector length 2. 2-elements vector,  link belt/ribbon. rou position link ends (rou1 rou2 set). percentage radius unit circle.  default value position bottom margin inner track. rou1 position end 1 link. rou2 position end 2 link. h Height link, measured percent radius unit circle. default automatically infered. h.ratio systematically change link height. value 0 1. w Since link Bezier curve, controls shape Bezier curve. h2 Height bottom edge link ribbon. w2 Shape bottom edge link ribbon. inverse Whether link inversed. col Color link. link ribbon, filled color ribbon. lwd Line (border) width lty Line (border) style border link ribbon, color ribbon border. directional 0 direction, 1 direction point1 point2, -1 direction point2 point1.  2 two directional. direction important arrow heads added. arr.width Width arrows, pass Arrowhead. arr.type Type arrows, pass Arrowhead. Default value triangle. additional option  big.arrow. arr.length Length arrows, measured 'cm', pass Arrowhead. arr.type set big.arrow,  value percent radius unit circle. arr.col Color arrows, pass Arrowhead. arr.lwd Line width arrows, pass Arrowhead. arr.lty Line type arrows, pass Arrowhead. reduce_to_mid_line use middle points point1 point2 draw link.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a link — ccLink","text":"Object ccLink","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccLink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a link — ccLink","text":"","code":"library(circlizePlus) set.seed(999) n = 1000 df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),x = rnorm(n), y = runif(n)) cc = ccPlot(initMode = \"initialize\", sectors = df$sectors, x = df$x) track1 = ccTrack(df$sectors, y = df$y) col = rep(c(\"#FF0000\", \"#00FF00\"), 4) tPoint1 = ccTrackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5) link1 = ccLink(\"a\", 0, \"b\", 0, h = 0.4) link2 = ccLink(\"c\", c(-0.5, 0.5), \"d\", c(-0.5,0.5), col = \"red\",border = \"blue\", h = 0.2) link3 = ccLink(\"e\", 0, \"g\", c(-1,1), col = \"green\", border = \"black\", lwd = 2, lty = 2) cc + (track1 + tPoint1) + link1 + link2 + link3"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPar-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Object generator for S4 class ccPar — ccPar-class","title":"Object generator for S4 class ccPar — ccPar-class","text":"Object generator S4 class ccPar","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPar-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Object generator for S4 class ccPar — ccPar-class","text":"params params list. named list stores parameters function circlize::circos.par called backend.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPar-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object generator for S4 class ccPar — ccPar-class","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPar.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters for the circular layout — ccPar","title":"Parameters for the circular layout — ccPar","text":"Object ccPar call function circlize::circos.par drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters for the circular layout — ccPar","text":"","code":"ccPar(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters for the circular layout — ccPar","text":"... Arguments passed circlize::circos.par RESET reset default values READ.please ignore LOCAL please ignore ADD please ignore","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameters for the circular layout — ccPar","text":"Object ccPar","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameters for the circular layout — ccPar","text":"","code":"library(circlizePlus) set.seed(999) n = 1000 df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),x = rnorm(n), y = runif(n)) par1 = ccPar(\"track.height\" = 0.1) cc = ccPlot(initMode = \"initialize\", sectors = df$sectors, x = df$x) track1 = ccTrack(df$sectors, y = df$y) col = rep(c(\"#FF0000\", \"#00FF00\"), 4) tPoint1 = ccTrackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5) cc + par1 + (track1 + tPoint1)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPlot-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccPlot — ccPlot-class","title":"S4 class ccPlot — ccPlot-class","text":"S4 class ccPlot","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPlot-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccPlot — ccPlot-class","text":"initMode character. can following values: \"initialize\", \"genomicInitialize\", \"initializeWithIdeogram\", \"heatmap.initialize\". initParams list. named list stores parameters function called backend. Based value initMode, backend function one following four:circlize::circos.initialize, circlize::circos.genomicInitialize, circlize::circos.initializeWithIdeogram, circlize::circos.heatmap.initialize. tracks list. list ccTrack ccGenomicTrack ccHeatmap stored. links list. list ccLink ccGenomicLink ccHeatmapLink stored. pars list. list ccPar stored. clear logical. Whether call circlize::circos.clear drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPlot-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccPlot — ccPlot-class","text":"","code":"n = 1000 df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),                 x = rnorm(n), y = runif(n)) library(circlizePlus) cc=ccPlot(initMode = 'initialize', sectors = df$sectors, x = df$x)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Object generator for S4 class ccPlot — ccPlot","title":"Object generator for S4 class ccPlot — ccPlot","text":"Object ccPlot calls one following functions based value initMode: circlize::circos.initialize, circlize::circos.genomicInitialize, circlize::circos.initializeWithIdeogram, circlize::circos.heatmap.initialize.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object generator for S4 class ccPlot — ccPlot","text":"","code":"ccPlot(initMode = 'initialize',clear = TRUE,sectors = NULL,x = NULL,xlim = NULL,sector.width = NULL,factors = sectors,ring = FALSE)  ccPlot(initMode = 'genomicInitialize',clear = TRUE,data=NULL,sector.names = NULL,major.by = NULL,plotType = c(\"axis\", \"labels\"),tickLabelsStartFromZero = TRUE,axis.labels.cex = 0.4*par(\"cex\"),labels.cex = 0.8*par(\"cex\"),track.height = NULL,...)  ccPlot(initMode = 'initializeWithIdeogram',clear = TRUE,cytoband = system.file(package = \"circlize\", \"extdata\", \"cytoBand.txt\"),species = NULL,sort.chr = TRUE,chromosome.index = usable_chromosomes(species),major.by = NULL,plotType = c(\"ideogram\", \"axis\", \"labels\"),track.height = NULL,ideogram.height = convert_height(2, \"mm\"),...)  ccPlot(initMode = 'heatmap.initialize',clear = TRUE,mat=NULL, split = NULL, cluster = TRUE,clustering.method = \"complete\", distance.method = \"euclidean\",dend.callback = function(dend, m, si) reorder(dend, rowMeans(m)),cell_width = rep(1, nrow(mat)))"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object generator for S4 class ccPlot — ccPlot","text":"initMode can following values: \"initialize\", \"genomicInitialize\", \"initializeWithIdeogram\", \"heatmap.initialize\". clear Whether call circlize::circos.clear drawing. ... Parameters passed function package circlize. function one following four:circlize::circos.initialize, circlize::circos.genomicInitialize, circlize::circos.initializeWithIdeogram, circlize::circos.heatmap.initialize.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object generator for S4 class ccPlot — ccPlot","text":"","code":"n = 1000 df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),                 x = rnorm(n), y = runif(n)) library(circlizePlus) cc=ccPlot(initMode = 'initialize', sectors = df$sectors, x = df$x)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw points in a region — ccPoints","title":"Draw points in a region — ccPoints","text":"Object ccCellGeom call function circlize::circos.points drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw points in a region — ccPoints","text":"","code":"ccPoints(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw points in a region — ccPoints","text":"... Arguments passed circlize::circos.points x Data points x-axis, measured \"current\" data coordinate y Data points y-axis, measured \"current\" data coordinate sector.index Index sector track.index Index track pch Point type col Point color cex Point size bg backgrond points","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw points in a region — ccPoints","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw points in a region — ccPoints","text":"","code":"library(circlizePlus) cc=ccPlot(sectors=letters[1:8], xlim = c(0, 1)) track1 = ccTrack(ylim = c(0, 1), panel.fun = function(x, y) {                                   circos.points(runif(10), runif(10))                                   }) cells=ccCell(sector.index = 'a')+ccPoints(x=runif(10), y=runif(10),                                          sector.index = \"c\", pch = 16, col = \"red\") track1 = track1+cells cc+track1"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPolygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw polygon — ccPolygon","title":"Draw polygon — ccPolygon","text":"Object ccCellGeom call function circlize::circos.polygon drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPolygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw polygon — ccPolygon","text":"","code":"ccPolygon(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPolygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw polygon — ccPolygon","text":"... Arguments passed circlize::circos.polygon x Data points x-axis y Data points y-axis sector.index Index sector track.index Index track","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPolygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw polygon — ccPolygon","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccPolygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw polygon — ccPolygon","text":"","code":"library(circlizePlus) cc=ccPlot(sectors=letters[1:8], xlim = c(0, 1)) track=ccTrack(ylim = c(0, 10)) cell=ccCell(sector.index = 'a')+ccPolygon(x=c(0.5,0.7,1),y=c(2,6,8)) track=track+cell cc+track"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Add raster image — ccRaster","title":"Add raster image — ccRaster","text":"Object ccCellGeom call function circlize::circos.raster drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add raster image — ccRaster","text":"","code":"ccRaster(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add raster image — ccRaster","text":"... Arguments passed circlize::circos.raster image raster object, object can converted .raster. x Position center raster image, measued data coordinate cell. y Position center raster image, measued data coordinate cell. width Width raster image. facing one \"inside\", \"outside\", \"clockwise\" \"reverse.clockwise\", image absolute size value width specified like 20mm, 1cm 0.5inche. facing one bending.inside bending.outside, value width measured data coordinate cell. height Height raster image. format width. value height omit,  default height calculated taking aspect ratio original image. facing one bending.inside bending.outside, height mandatory set. facing Facing raster image. niceFacing Facing text. Please refer vignette different settings. sector.index Index sector. track.index Index track. scaling Scaling factor resize raster image.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add raster image — ccRaster","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add raster image — ccRaster","text":"","code":"library(circlizePlus) library(png) image = system.file(\"extdata\", \"Rlogo.png\", package = \"circlize\") image = as.raster(readPNG(image)) library(circlizePlus) cc=ccPlot(sectors=letters[1:4], xlim = c(0, 10)) track=ccTrack(ylim = c(0, 1)) cell=ccCell(sector.index = 'a')+ccRaster(image=image, x=5,y=0.5,width = \"2cm\",facing = \"inside\", niceFacing = TRUE) track=track+cell cc+track"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccRect.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw rectangle in a region — ccRect","title":"Draw rectangle in a region — ccRect","text":"Object ccCellGeom call function circlize::circos.rect drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccRect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw rectangle in a region — ccRect","text":"","code":"ccRect(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccRect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw rectangle in a region — ccRect","text":"... Arguments passed circlize::circos.rect xleft x left bottom points ybottom y left bottom points xright x right top points ytop y right top points sector.index Index sector track.index Index track rot Rotation rectangles. value measured clockwise degree. Rotation relative center rectangles.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccRect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw rectangle in a region — ccRect","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccRect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw rectangle in a region — ccRect","text":"","code":"library(circlizePlus) cc=ccPlot(sectors=letters[1:8], xlim = c(0, 1)) track=ccTrack(ylim = c(0, 1), track.height = 0.3) cell=ccCell(sector.index = 'a')+ccRect(xleft=0.7,ybottom=0.1,xright=0.8,ytop=0.9) track=track+cell cc+track"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccSegments.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw segments connecting points in a region — ccSegments","title":"Draw segments connecting points in a region — ccSegments","text":"Object ccCellGeom call function circlize::circos.segments drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccSegments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw segments connecting points in a region — ccSegments","text":"","code":"ccSegments(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccSegments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw segments connecting points in a region — ccSegments","text":"... Arguments passed circlize::circos.segments x0 x coordinates starting points. y0 y coordinates ending points. x1 x coordinates starting points. y1 y coordinates ending points. sector.index Index sector. track.index Index track. straight Whether segment straight line. col Color segments. lwd Line width segments. lty Line type segments.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccSegments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw segments connecting points in a region — ccSegments","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccSegments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw segments connecting points in a region — ccSegments","text":"","code":"library(circlizePlus) cc=ccPlot(sectors=letters[1:8], xlim = c(0, 1)) track=ccTrack(ylim = c(0, 1), track.height = 0.3) cell=ccCell(sector.index = 'a')+ccSegments(x0=0.7,y0=0.1,x1=0.7,y1=0.9) track=track+cell cc+track"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccText.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw text in a cell — ccText","title":"Draw text in a cell — ccText","text":"Object ccCellGeom call function circlize::circos.text drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw text in a cell — ccText","text":"","code":"ccText(   x,   y,   labels,   direction = NULL,   facing = c(\"inside\", \"outside\", \"reverse.clockwise\", \"clockwise\", \"downward\",     \"bending\", \"bending.inside\", \"bending.outside\"),   niceFacing = FALSE,   adj = par(\"adj\"),   cex = 1,   col = par(\"col\"),   font = par(\"font\"),   ... )"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw text in a cell — ccText","text":"x Data points x-axis y Data points y-axis labels Labels points direction deprecated, use facing instead. facing Facing text. Please refer vignette different settings niceFacing facing text adjusted fit human eyes? adj offset text. default text position adjustment either horizontal vertical canvas coordinate system. \"circular horizontal\" offset can set value degree unit value wrapped degree. cex Font size col Font color font Font style ... Pass text","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccText.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw text in a cell — ccText","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccText.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw text in a cell — ccText","text":"","code":"library(circlizePlus) n = 1000 df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),                 x = rnorm(n), y = runif(n)) par1=ccPar(\"track.height\" = 0.1) cc=ccPlot(sectors = df$sectors, x = df$x) + par1 track1 = ccTrack(sectors = df$sectors, y = df$y,                  panel.fun = function(x, y) {                    circos.text(CELL_META$xcenter,                                CELL_META$cell.ylim[2] + mm_y(5),                                CELL_META$sector.index)                    circos.axis(labels.cex = 0.6)                  }) cell1 = ccCell(sector.index = 'a') + ccText(-1, 0.5, \"text\") track1 = track1 + cell1 cc = cc + track1 cc #> Note: 1 point is out of plotting region in sector 'a', track '1'. #> Note: 1 point is out of plotting region in sector 'b', track '1'. #> Note: 1 point is out of plotting region in sector 'c', track '1'. #> Note: 1 point is out of plotting region in sector 'd', track '1'. #> Note: 1 point is out of plotting region in sector 'e', track '1'. #> Note: 1 point is out of plotting region in sector 'f', track '1'. #> Note: 1 point is out of plotting region in sector 'g', track '1'. #> Note: 1 point is out of plotting region in sector 'h', track '1'."},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrack-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccTrack — ccTrack-class","title":"S4 class ccTrack — ccTrack-class","text":"S4 class ccTrack","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrack-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccTrack — ccTrack-class","text":"func character. Normally \"circos.track\" \"circos.trackHist\". params list. named list stores parameters function called backend. trackGeoms list. list ccTrackGeom stored. cells list. list ccCell stored.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrack-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccTrack — ccTrack-class","text":"","code":"n = 1000 df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),                 x = rnorm(n), y = runif(n)) library(circlizePlus) par1=ccPar(\"track.height\" = 0.1) cc=ccPlot(sectors = df$sectors, x = df$x) + par1 track1 = ccTrack(sectors = df$sectors, y = df$y,                  panel.fun = function(x, y) {                    circos.text(CELL_META$xcenter,                                CELL_META$cell.ylim[2] + mm_y(5),                                CELL_META$sector.index)                    circos.axis(labels.cex = 0.6)                  }) cc=cc+track1 cc #> Note: 1 point is out of plotting region in sector 'a', track '1'. #> Note: 1 point is out of plotting region in sector 'b', track '1'. #> Note: 1 point is out of plotting region in sector 'c', track '1'. #> Note: 1 point is out of plotting region in sector 'd', track '1'. #> Note: 1 point is out of plotting region in sector 'e', track '1'. #> Note: 1 point is out of plotting region in sector 'f', track '1'. #> Note: 1 point is out of plotting region in sector 'g', track '1'. #> Note: 1 point is out of plotting region in sector 'h', track '1'.  circos.clear()"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrack.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a generic track — ccTrack","title":"Define a generic track — ccTrack","text":"Object ccTrack call function circlize::circos.trackPlotRegion drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a generic track — ccTrack","text":"","code":"ccTrack(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a generic track — ccTrack","text":"... Arguments passed circlize::circos.trackPlotRegion sectors factor character vector represents categories data, NULL, uses sector index. factors sectors. removed future versions. x Data x-axis. used panel.fun set. y Data y-axis ylim Range data y-axis force.ylim Whether force cells track share ylim. Normally, cells track ylim. track.index Index track going created/updated. specified track already created, function just updated corresponding track new plot. specified track NULL created, function just creates . Note value argument exceed maximum track index plus 1. track.height Height track. percentage radius unit circles. value can set uh absolute unit. updating track (proper track.index value), argument ignored. track.margin affect current track cell.padding affect current track bg.col Background color plotting regions. can vector length sectors. bg.border Color border plotting regions. can vector length sectors. bg.lty Line style border plotting regions. can vector length sectors. bg.lwd Line width border plotting regions. can vector length sectors. panel.fun Panel function add graphics cell, see \"details\" section vignette explanation.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a generic track — ccTrack","text":"Object ccTrack","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a generic track — ccTrack","text":"","code":"library(circlizePlus) n = 1000 df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),                 x = rnorm(n), y = runif(n)) library(circlizePlus) par1=ccPar(\"track.height\" = 0.1) cc=ccPlot(sectors = df$sectors, x = df$x) + par1 track1 = ccTrack(sectors = df$sectors, y = df$y,                  panel.fun = function(x, y) {                    circos.text(CELL_META$xcenter,                                CELL_META$cell.ylim[2] + mm_y(5),                                CELL_META$sector.index)                    circos.axis(labels.cex = 0.6)                  }) cc=cc+track1 cc #> Note: 1 point is out of plotting region in sector 'a', track '1'. #> Note: 1 point is out of plotting region in sector 'b', track '1'. #> Note: 1 point is out of plotting region in sector 'c', track '1'. #> Note: 1 point is out of plotting region in sector 'd', track '1'. #> Note: 1 point is out of plotting region in sector 'e', track '1'. #> Note: 1 point is out of plotting region in sector 'f', track '1'. #> Note: 1 point is out of plotting region in sector 'g', track '1'. #> Note: 1 point is out of plotting region in sector 'h', track '1'.  circos.clear()"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackGeom-class.html","id":null,"dir":"Reference","previous_headings":"","what":"S4 class ccTrackGeom — ccTrackGeom-class","title":"S4 class ccTrackGeom — ccTrackGeom-class","text":"Objectified representation R package circlize's plotting functions corresponding parameters track level.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackGeom-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"S4 class ccTrackGeom — ccTrackGeom-class","text":"func character. name plot function R package circlize. params list. named list stores parameters function called backend.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackGeom-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S4 class ccTrackGeom — ccTrackGeom-class","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackHist.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a track of histograms — ccTrackHist","title":"Define a track of histograms — ccTrackHist","text":"Object ccTrack call function circlize::circos.trackHist drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackHist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a track of histograms — ccTrackHist","text":"","code":"ccTrackHist(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackHist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a track of histograms — ccTrackHist","text":"... Arguments passed circlize::circos.trackHist sectors factor character vector represents categories data factors sectors. removed future versions. x Data x-axis track.index Index track going updated. Setting NULL means creating plotting regions next newest track. track.height Height track. percentage radius unit circle. update track, argument disabled. ylim Ranges y-direction. default, ylim calculated automatically. force.ylim Whether force cells track share ylim. col Filled color histogram border Border color histogram lty Line style histogram lwd Line width histogram bg.col Background color plotting regions bg.border Color border plotting regions bg.lty Line style border plotting regions bg.lwd Line width border plotting regions breaks see hist include.lowest see hist right see hist draw.density whether draw density lines instead histogram bars. area whether fill area density lines. set TRUE, col controls filled color area border controls color line. bin.size size bins histogram","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackHist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a track of histograms — ccTrackHist","text":"Object ccTrack","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackHist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a track of histograms — ccTrackHist","text":"","code":"library(circlizePlus) n = 1000 df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),                 x = rnorm(n), y = runif(n)) library(circlizePlus) par1=ccPar(\"track.height\" = 0.1) cc=ccPlot(sectors = df$sectors, x = df$x) + par1;bgcol = rep(c(\"#EFEFEF\", \"#CCCCCC\"), 4) track2 = ccTrackHist(df$sectors, df$x, bin.size = 0.2, bg.col = bgcol, col = NA) cc=cc+track2 cc  circos.clear()"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Add lines on all sections of a single track. — ccTrackLines","title":"Add lines on all sections of a single track. — ccTrackLines","text":"Object ccTrackGeom call function circlize::circos.trackLines drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add lines on all sections of a single track. — ccTrackLines","text":"","code":"ccTrackLines(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add lines on all sections of a single track. — ccTrackLines","text":"... Arguments passed circlize::circos.trackLines sectors factor character vector represents categories data. factors sectors. removed future versions. x Data points x-axis. y Data points y-axis. track.index Index track. col Line color. lwd Line width. lty Line style. type Line type, similar type argument lines, c(\"l\", \"o\", \"h\", \"s\"). straight Whether draw straight lines points. area Whether fill area lines. set TRUE, col controls filled color area border controls color line. area.baseline Deprecated, use baseline instead. baseline base line draw area, pass circos.lines. border Color border area. pt.col type \"o\", points color. cex type \"o\", points size. pch type \"o\", points type.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add lines on all sections of a single track. — ccTrackLines","text":"Object ccTrackGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add lines on all sections of a single track. — ccTrackLines","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Add points on all sections of a single track. — ccTrackPoints","title":"Add points on all sections of a single track. — ccTrackPoints","text":"Object ccTrackGeom call function circlize::circos.trackPoints drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackPoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add points on all sections of a single track. — ccTrackPoints","text":"","code":"ccTrackPoints(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add points on all sections of a single track. — ccTrackPoints","text":"... Arguments passed circlize::circos.trackPoints sectors factor character vector represents categories data factors sectors. removed future versions. x Data points x-axis y Data points y-axis track.index Index track pch Point type col Point color cex Point size bg backgrond color","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackPoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add points on all sections of a single track. — ccTrackPoints","text":"Object ccTrackGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackPoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add points on all sections of a single track. — ccTrackPoints","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackText.html","id":null,"dir":"Reference","previous_headings":"","what":"Add texts on all sections of a single track. — ccTrackText","title":"Add texts on all sections of a single track. — ccTrackText","text":"Object ccTrackGeom call function circlize::circos.trackText drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add texts on all sections of a single track. — ccTrackText","text":"","code":"ccTrackText(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add texts on all sections of a single track. — ccTrackText","text":"... Arguments passed circlize::circos.trackText sectors factor character vector represents categories data factors sectors. removed future versions. x Data points x-axis y Data points y-axis labels Labels track.index Index track direction deprecated, use facing instead. facing Facing text niceFacing facing text adjusted fit human eyes? adj Adjustment text cex Font size col Font color font Font style","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackText.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add texts on all sections of a single track. — ccTrackText","text":"Object ccTrackGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccTrackText.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add texts on all sections of a single track. — ccTrackText","text":"","code":"NULL #> NULL"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccViolin.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw violin plots — ccViolin","title":"Draw violin plots — ccViolin","text":"Object ccCellGeom call function circlize::circos.violin drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccViolin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw violin plots — ccViolin","text":"","code":"ccViolin(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccViolin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw violin plots — ccViolin","text":"... Arguments passed circlize::circos.violin value numeric vector, matrix list. matrix, boxplots made columns. pos Positions boxes. violin_width Width violins. col Filled color boxes. border Color border well quantile lines. lwd Line width. lty Line style show_quantile Whether show quantile lines. cex Point size. pch Point type. pt.col Point color max_density maximal density value across several violins. used compare violins. sector.index Index sector. track.index Index track.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccViolin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw violin plots — ccViolin","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccViolin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw violin plots — ccViolin","text":"","code":"library(circlizePlus) cc=ccPlot(sectors=letters[1:4], xlim = c(0, 10)) track=ccTrack(ylim = c(0, 1)) cell=ccCell(sector.index = 'a')+ccViolin(value=replicate(runif(10), n = 10, simplify = FALSE), pos=1:10 - 0.5,col = 1:10) track=track+cell cc+track #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccXaxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw x-axis — ccXaxis","title":"Draw x-axis — ccXaxis","text":"Object ccCellGeom call function circlize::circos.axis drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccXaxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw x-axis — ccXaxis","text":"","code":"ccXaxis(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccXaxis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw x-axis — ccXaxis","text":"... Arguments passed circlize::circos.axis h Position x-axis, can \"top\", \"bottom\" numeric value major.numeric vector, identifies positions major ticks. can exceed xlim value exceeding part trimmed automatically. NULL, every 10 degrees major tick. labels labels major ticks. Also, exceeding part trimmed automatically. value can also logical (either atomic value vector) represents labels show. major.tick Whether draw major tick. set FALSE, minor ticks neither. sector.index Index sector. track.index Index track. labels.font Font style axis labels. labels.cex Font size axis labels. labels.direction Deprecated, use facing instead. labels.facing Facing labels axis, passing circos.text labels.niceFacing facing axis labels human-easy. direction Whether axis ticks point outside inside circle. minor.ticks Number minor ticks two close major ticks. major.tick.length Length major ticks, measured \"current\" data coordinate. convert_y can used convert absolute unit data coordinate. major.tick.percentage used , please directly use major.tick.length. lwd Line width ticks. col Color axes. labels.col Color labels. labels.pos.adjust Whether adjust positions first label last label first label  align left last label align right exceed range axes. value can vector length two correspond first label last label.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccXaxis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw x-axis — ccXaxis","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccXaxis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw x-axis — ccXaxis","text":"","code":"library(circlizePlus) cc=ccPlot(sectors=letters[1:8], xlim = c(0, 1)) track=ccTrack(ylim = c(0, 10)) cell=ccCell(sector.index = 'a')+ccXaxis(sector.index = \"a\") track=track+cell cc+track"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccYaxis.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw y-axis — ccYaxis","title":"Draw y-axis — ccYaxis","text":"Object ccCellGeom call function circlize::circos.yaxis drawing.","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccYaxis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw y-axis — ccYaxis","text":"","code":"ccYaxis(...)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccYaxis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw y-axis — ccYaxis","text":"... Arguments passed circlize::circos.yaxis side add y-axis left right cell numeric vector, identifies positions ticks. can exceed ylim value exceeding part trimmed automatically. labels labels ticks. exceeding part trimmed automatically. value can also logical (either atomic value vector) represents labels show. tick Whether draw ticks. sector.index Index sector track.index Index track labels.font font style axis labels labels.cex font size axis labels labels.niceFacing facing axis labels human-easy tick.length length tick lwd line width ticks col color axes labels.col color labels","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccYaxis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw y-axis — ccYaxis","text":"Object ccCellGeom","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/ccYaxis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw y-axis — ccYaxis","text":"","code":"library(circlizePlus) cc=ccPlot(sectors=letters[1:8], xlim = c(0, 1)) track=ccTrack(ylim = c(0, 10)) cell=ccCell(sector.index = 'a')+ccYaxis(side = \"left\",sector.index = 2) track=track+cell cc+track"},{"path":"https://tianzelab.github.io/circlizePlus/reference/circlizePlus-package.html","id":null,"dir":"Reference","previous_headings":"","what":"circlizePlus: Using ggplot2 feature to write readable R code for circular visualization — circlizePlus-package","title":"circlizePlus: Using ggplot2 feature to write readable R code for circular visualization — circlizePlus-package","text":"circlizePlus wrapper circlize. components based classes objects. Users can use addition symbol (+) combine components circular visualization ggplot2 style.","code":""},{"path":[]},{"path":"https://tianzelab.github.io/circlizePlus/reference/circlizePlus-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"circlizePlus: Using ggplot2 feature to write readable R code for circular visualization — circlizePlus-package","text":"Maintainer: Tianze Cao hnrcao@qq.com (ORCID) Authors: Zheyu Zhang 2054906893@qq.com","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/show.ccHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"A generic function of show ccHeatmap — show.ccHeatmap","title":"A generic function of show ccHeatmap — show.ccHeatmap","text":"generic function show ccHeatmap","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/show.ccHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A generic function of show ccHeatmap — show.ccHeatmap","text":"","code":"show(object)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/show.ccHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A generic function of show ccHeatmap — show.ccHeatmap","text":"object Object ccHeatmap","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/show.ccHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A generic function of show ccHeatmap — show.ccHeatmap","text":"","code":"library(circlizePlus) set.seed(123) mat1 = rbind(cbind(matrix(rnorm(50*5, mean = 1), nr = 50),                    matrix(rnorm(50*5, mean = -1), nr = 50)),              cbind(matrix(rnorm(50*5, mean = -1), nr = 50),                    matrix(rnorm(50*5, mean = 1), nr = 50))             ) rownames(mat1) = paste0(\"R\", 1:100) colnames(mat1) = paste0(\"C\", 1:10) mat1 = mat1[sample(100, 100), ] # randomly permute rows split = sample(letters[1:5], 100, replace = TRUE) spilt = factor(split, levels = letters[1:5]) col_fun1 = colorRamp2(c(-2, 0, 2), c(\"blue\", \"white\", \"red\")) show(ccHeatmap(mat=mat1, split = split, col = col_fun1))"},{"path":"https://tianzelab.github.io/circlizePlus/reference/show.ccPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"A generic function of show ccPlot — show.ccPlot","title":"A generic function of show ccPlot — show.ccPlot","text":"generic function show ccPlot","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/show.ccPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A generic function of show ccPlot — show.ccPlot","text":"","code":"show(object)"},{"path":"https://tianzelab.github.io/circlizePlus/reference/show.ccPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A generic function of show ccPlot — show.ccPlot","text":"object Object ccPlot","code":""},{"path":"https://tianzelab.github.io/circlizePlus/reference/show.ccPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A generic function of show ccPlot — show.ccPlot","text":"","code":"library(circlizePlus) n = 1000 df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),                 x = rnorm(n), y = runif(n)) library(circlizePlus) par1=ccPar(\"track.height\" = 0.1) cc=ccPlot(sectors = df$sectors, x = df$x) + par1 track1 = ccTrack(sectors = df$sectors, y = df$y,                  panel.fun = function(x, y) {                    circos.text(CELL_META$xcenter,                                CELL_META$cell.ylim[2] + mm_y(5),                                CELL_META$sector.index)                    circos.axis(labels.cex = 0.6)                  }) cc=cc+track1 show(cc) #> Note: 1 point is out of plotting region in sector 'a', track '1'. #> Note: 1 point is out of plotting region in sector 'b', track '1'. #> Note: 1 point is out of plotting region in sector 'c', track '1'. #> Note: 1 point is out of plotting region in sector 'd', track '1'. #> Note: 1 point is out of plotting region in sector 'e', track '1'. #> Note: 1 point is out of plotting region in sector 'f', track '1'. #> Note: 1 point is out of plotting region in sector 'g', track '1'. #> Note: 1 point is out of plotting region in sector 'h', track '1'."}]
